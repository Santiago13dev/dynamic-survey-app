{"ast":null,"code":"import { jsPDF } from 'jspdf';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/survey.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/list\";\nimport * as i7 from \"ng2-charts\";\nconst _c0 = () => ({\n  responsive: true,\n  maintainAspectRatio: false\n});\nfunction SurveyResultsComponent_mat_card_0_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-card\", 6)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"canvas\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const res_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(res_r3.question.text);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"data\", res_r3.chartData)(\"type\", \"bar\")(\"options\", i0.ɵɵpureFunction0(4, _c0));\n  }\n}\nfunction SurveyResultsComponent_mat_card_0_div_9_mat_list_4_mat_list_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ans_r4 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ans_r4);\n  }\n}\nfunction SurveyResultsComponent_mat_card_0_div_9_mat_list_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list\");\n    i0.ɵɵtemplate(1, SurveyResultsComponent_mat_card_0_div_9_mat_list_4_mat_list_item_1_Template, 2, 1, \"mat-list-item\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const res_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", res_r5.answers);\n  }\n}\nfunction SurveyResultsComponent_mat_card_0_div_9_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No hay respuestas registradas.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SurveyResultsComponent_mat_card_0_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-card\", 6)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, SurveyResultsComponent_mat_card_0_div_9_mat_list_4_Template, 2, 1, \"mat-list\", 8)(5, SurveyResultsComponent_mat_card_0_div_9_ng_template_5_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const res_r5 = ctx.$implicit;\n    const noAnswers_r6 = i0.ɵɵreference(6);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(res_r5.question.text);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", res_r5.answers.length)(\"ngIfElse\", noAnswers_r6);\n  }\n}\nfunction SurveyResultsComponent_mat_card_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-card\", 2)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 3)(4, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function SurveyResultsComponent_mat_card_0_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.exportCSV());\n    });\n    i0.ɵɵtext(5, \"Exportar CSV\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function SurveyResultsComponent_mat_card_0_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.exportPDF());\n    });\n    i0.ɵɵtext(7, \"Exportar PDF\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, SurveyResultsComponent_mat_card_0_div_8_Template, 5, 5, \"div\", 5)(9, SurveyResultsComponent_mat_card_0_div_9_Template, 7, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Resultados para: \", ctx_r1.survey.title, \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.radioResults);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.textResults);\n  }\n}\nexport let SurveyResultsComponent = /*#__PURE__*/(() => {\n  class SurveyResultsComponent {\n    constructor(route, surveyService, router) {\n      this.route = route;\n      this.surveyService = surveyService;\n      this.router = router;\n      this.responses = [];\n      this.radioResults = [];\n      this.textResults = [];\n    }\n    ngOnInit() {\n      const idParam = this.route.snapshot.paramMap.get('id');\n      const surveyId = idParam ? +idParam : null;\n      if (!surveyId) {\n        this.router.navigate(['/surveys']);\n        return;\n      }\n      const survey = this.surveyService.getSurvey(surveyId);\n      if (!survey) {\n        this.router.navigate(['/surveys']);\n        return;\n      }\n      this.survey = survey;\n      this.responses = this.surveyService.getResponsesForSurvey(survey.id);\n      this.calculateResults();\n    }\n    /**\n     * Compute aggregated results for each question. Radio questions get chart data\n     * while text questions simply collect all answers.\n     */\n    calculateResults() {\n      if (!this.survey) return;\n      this.radioResults = [];\n      this.textResults = [];\n      for (const q of this.survey.questions) {\n        if (q.type === 'radio') {\n          const counts = {};\n          this.responses.forEach(resp => {\n            const ansObj = resp.answers.find(a => a.questionId === q.id);\n            if (ansObj && typeof ansObj.answer === 'string') {\n              counts[ansObj.answer] = (counts[ansObj.answer] || 0) + 1;\n            }\n          });\n          const labels = Object.keys(counts);\n          const data = labels.map(l => counts[l]);\n          this.radioResults.push({\n            question: q,\n            chartData: {\n              labels,\n              datasets: [{\n                data,\n                label: 'Respuestas'\n              }]\n            }\n          });\n        } else {\n          const answers = [];\n          this.responses.forEach(resp => {\n            const ansObj = resp.answers.find(a => a.questionId === q.id);\n            if (ansObj && typeof ansObj.answer === 'string') {\n              answers.push(ansObj.answer);\n            }\n          });\n          this.textResults.push({\n            question: q,\n            answers\n          });\n        }\n      }\n    }\n    /**\n     * Export the survey results to a CSV file. The CSV contains one row per\n     * question response.\n     */\n    exportCSV() {\n      if (!this.survey) return;\n      const rows = [];\n      rows.push(['Pregunta', 'Respuesta']);\n      this.responses.forEach(resp => {\n        resp.answers.forEach(answer => {\n          const question = this.survey?.questions.find(q => q.id === answer.questionId);\n          const questionText = question ? question.text : '';\n          rows.push([questionText, Array.isArray(answer.answer) ? answer.answer.join('; ') : answer.answer]);\n        });\n      });\n      const csvContent = rows.map(r => r.map(val => '\"' + (val ?? '').replace(/\"/g, '\"\"') + '\"').join(',')).join('\\n');\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8'\n      });\n      saveAs(blob, `survey-${this.survey.id}-results.csv`);\n    }\n    /**\n     * Export the survey results to a PDF file using jsPDF. Charts are not\n     * embedded; instead a summary table is included.\n     */\n    exportPDF() {\n      if (!this.survey) return;\n      const doc = new jsPDF();\n      doc.setFontSize(18);\n      doc.text(`Resultados de la encuesta: ${this.survey.title}`, 10, 20);\n      doc.setFontSize(12);\n      let y = 30;\n      this.radioResults.forEach(res => {\n        doc.text(`Pregunta: ${res.question.text}`, 10, y);\n        y += 6;\n        res.chartData.labels?.forEach((label, idx) => {\n          const count = res.chartData.datasets[0].data[idx];\n          doc.text(`- ${label}: ${count}`, 12, y);\n          y += 6;\n        });\n        y += 4;\n        if (y > 270) {\n          doc.addPage();\n          y = 20;\n        }\n      });\n      this.textResults.forEach(res => {\n        doc.text(`Pregunta: ${res.question.text}`, 10, y);\n        y += 6;\n        res.answers.forEach(ans => {\n          doc.text(`- ${ans}`, 12, y);\n          y += 6;\n          if (y > 270) {\n            doc.addPage();\n            y = 20;\n          }\n        });\n        y += 4;\n      });\n      doc.save(`survey-${this.survey.id}-results.pdf`);\n    }\n    static {\n      this.ɵfac = function SurveyResultsComponent_Factory(t) {\n        return new (t || SurveyResultsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.SurveyService), i0.ɵɵdirectiveInject(i1.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: SurveyResultsComponent,\n        selectors: [[\"app-survey-results\"]],\n        decls: 1,\n        vars: 1,\n        consts: [[\"noAnswers\", \"\"], [\"class\", \"results-card\", 4, \"ngIf\"], [1, \"results-card\"], [1, \"actions\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [1, \"result-section\"], [\"baseChart\", \"\", 3, \"data\", \"type\", \"options\"], [4, \"ngIf\", \"ngIfElse\"]],\n        template: function SurveyResultsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵtemplate(0, SurveyResultsComponent_mat_card_0_Template, 10, 3, \"mat-card\", 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.survey);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf, i4.MatButton, i5.MatCard, i6.MatList, i6.MatListItem, i7.BaseChartDirective],\n        styles: [\".results-card[_ngcontent-%COMP%]{margin:1rem auto;max-width:900px;padding:1rem}.actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;gap:1rem;margin-bottom:1rem}.result-section[_ngcontent-%COMP%]{margin-bottom:1.5rem;padding:1rem}canvas[_ngcontent-%COMP%]{width:100%!important;height:300px!important}\"]\n      });\n    }\n  }\n  return SurveyResultsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}