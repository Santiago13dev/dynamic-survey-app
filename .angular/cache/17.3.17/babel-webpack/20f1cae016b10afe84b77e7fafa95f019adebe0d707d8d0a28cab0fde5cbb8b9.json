{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/**\n * A simple in‑memory survey store. Surveys and responses are persisted to\n * localStorage so data survives page reloads. In a real application\n * surveys and responses would be loaded and stored on a backend server.\n */\nexport let SurveyService = /*#__PURE__*/(() => {\n  class SurveyService {\n    constructor() {\n      this.surveysSubject = new BehaviorSubject([]);\n      this.surveys$ = this.surveysSubject.asObservable();\n      this.responsesSubject = new BehaviorSubject([]);\n      this.responses$ = this.responsesSubject.asObservable();\n      this.surveyIdCounter = 0;\n      this.questionIdCounter = 0;\n      // Load from localStorage on startup\n      const surveys = localStorage.getItem('surveys');\n      const responses = localStorage.getItem('surveyResponses');\n      if (surveys) {\n        this.surveysSubject.next(JSON.parse(surveys));\n        // compute next id based on highest existing id\n        const maxId = JSON.parse(surveys).reduce((max, s) => Math.max(max, s.id), 0);\n        this.surveyIdCounter = maxId;\n        const maxQId = JSON.parse(surveys).reduce((max, s) => {\n          const qmax = s.questions.reduce((mq, q) => Math.max(mq, q.id), 0);\n          return Math.max(max, qmax);\n        }, 0);\n        this.questionIdCounter = maxQId;\n      }\n      if (responses) {\n        this.responsesSubject.next(JSON.parse(responses));\n      }\n    }\n    /**\n     * Add a new survey. IDs are automatically assigned. Persists surveys to localStorage.\n     */\n    addSurvey(survey) {\n      const newSurvey = {\n        ...survey,\n        id: ++this.surveyIdCounter,\n        questions: survey.questions.map(q => ({\n          ...q,\n          id: ++this.questionIdCounter\n        }))\n      };\n      const updated = [...this.surveysSubject.value, newSurvey];\n      this.surveysSubject.next(updated);\n      localStorage.setItem('surveys', JSON.stringify(updated));\n    }\n    /**\n     * Return a survey by id.\n     */\n    getSurvey(id) {\n      return this.surveysSubject.value.find(s => s.id === id);\n    }\n    /**\n     * Add a response for a survey. Persists responses to localStorage.\n     */\n    addResponse(response) {\n      const updated = [...this.responsesSubject.value, response];\n      this.responsesSubject.next(updated);\n      localStorage.setItem('surveyResponses', JSON.stringify(updated));\n    }\n    /**\n     * Get all responses for a given survey.\n     */\n    getResponsesForSurvey(surveyId) {\n      return this.responsesSubject.value.filter(r => r.surveyId === surveyId);\n    }\n    static {\n      this.ɵfac = function SurveyService_Factory(t) {\n        return new (t || SurveyService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: SurveyService,\n        factory: SurveyService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return SurveyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}